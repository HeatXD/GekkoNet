name: Create Release

on:
  push:
    branches: [ main ]

permissions:
  contents: write
  packages: write
  deployments: write

jobs:
  build:
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        asio: [with_asio, no_asio]
        configuration: [Debug, Release]
        include:
          - os: windows-latest
            archive_ext: zip
            archive_cmd: 7z a
            platform: windows
          - os: ubuntu-latest
            archive_ext: tar.gz
            archive_cmd: tar -czf
            platform: linux
          - os: macos-latest
            archive_ext: tar.gz
            archive_cmd: tar -czf
            platform: macos
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v2

      - name: Create build directory
        run: cmake -E make_directory build

      - name: Configure CMake
        run: |
          cmake -S GekkoLib -B build -DCMAKE_BUILD_TYPE=${{ matrix.configuration }} \
          -DBUILD_SHARED_LIBS=ON \
          -DNO_ASIO_BUILD=${{ matrix.asio == 'no_asio' && 'ON' || 'OFF' }}

      - name: Build
        run: cmake --build build --config ${{ matrix.configuration }}

      - name: Prepare files for packaging
        run: |
          mkdir -p package/${{ matrix.configuration }}/lib
          mkdir -p package/${{ matrix.configuration }}/include
          cp -r my_subfolder/include/* package/${{ matrix.configuration }}/include/
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            cp build/${{ matrix.configuration }}/* package/${{ matrix.configuration }}/lib/ || true
          else
            cp build/* package/${{ matrix.configuration }}/lib/ || true
          fi
        shell: bash

      - name: Create Windows Archive
        if: matrix.os == 'windows-latest'
        run: |
          cd package
          7z a ../GekkoNet-${{ matrix.platform }}-${{ matrix.asio }}-${{ matrix.configuration }}.${{ matrix.archive_ext }} *

      - name: Create Unix Archive
        if: matrix.os != 'windows-latest'
        run: |
          cd package
          tar -czf ../GekkoNet-${{ matrix.platform }}-${{ matrix.asio }}-${{ matrix.configuration }}.${{ matrix.archive_ext }} *

  create_release:
    needs: build
    runs-on: ubuntu-latest
    if: ${{ success() }}  # Only proceed if the build job succeeded
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Get version
        id: version
        run: |
          echo "version=$(date +'%Y.%m.%d')-$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.version.outputs.version }}
          release_name: Release ${{ steps.version.outputs.version }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./GekkoNet-${{ matrix.platform }}-${{ matrix.asio }}-${{ matrix.configuration }}.${{ matrix.archive_ext }}
          asset_name: GekkoNet-${{ matrix.platform }}-${{ matrix.asio }}-${{ matrix.configuration }}.${{ matrix.archive_ext }}
          asset_content_type: ${{ matrix.archive_ext == 'zip' && 'application/zip' || 'application/gzip' }}
